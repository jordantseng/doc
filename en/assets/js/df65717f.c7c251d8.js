"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8682:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={},o="Hoisting",l={unversionedId:"JavaScript/hoisting",id:"JavaScript/hoisting",title:"Hoisting",description:"TL;DR",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/JavaScript/hoisting.md",sourceDirName:"JavaScript",slug:"/JavaScript/hoisting",permalink:"/frontendwiz/en/JavaScript/hoisting",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JavaScript/hoisting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Closure",permalink:"/frontendwiz/en/JavaScript/closure"},next:{title:"Promise",permalink:"/frontendwiz/en/JavaScript/promise"}},p={},s=[{value:"TL;DR",id:"tldr",level:3},{value:"What is hoisting",id:"what-is-hoisting",level:3},{value:"Compilation Process",id:"compilation-process",level:3},{value:"<code>undefined</code> vs. not defined",id:"undefined-vs-not-defined",level:3},{value:"FAQ",id:"faq",level:3}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hoisting"},"Hoisting"),(0,i.kt)("h3",{id:"tldr"},"TL;DR"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Variable")," and ",(0,i.kt)("strong",{parentName:"li"},"function declarations"),' are "hoisted" to the top of their respective scope.'),(0,i.kt)("li",{parentName:"ul"},"Hoisting doesn't actually move the code, but is related to the compilation process of the JavaScript engine."),(0,i.kt)("li",{parentName:"ul"},"The compilation process is divided into a ",(0,i.kt)("strong",{parentName:"li"},"creation phase")," and an ",(0,i.kt)("strong",{parentName:"li"},"execution phase"),". During the creation phase, memory locations are created for variables, while during the execution phase, values are assigned.")),(0,i.kt)("h3",{id:"what-is-hoisting"},"What is hoisting"),(0,i.kt)("p",null,"In JavaScript, hoisting refers to the behavior of variables and function declarations being lifted to the top of their scope."),(0,i.kt)("p",null,"Variable declarations using ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," are all hoisted."),(0,i.kt)("p",null,'However, the term "hoisting" can be misleading, as it implies that the code is physically moved, when in reality it\'s a part of the compilation process.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// actual code\nconsole.log(a);\nvar a = 1;\n\n// interpreted by the JavaScript engine as\nvar a;\nconsole.log(a);\na = 1;\n")),(0,i.kt)("h3",{id:"compilation-process"},"Compilation Process"),(0,i.kt)("p",null,"In JavaScript, the compilation process can be divided into two phases\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Creation"),"\uff1aThe JavaScript engine creates memory space for variables and function declarations. For variables, the default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),", while for function declarations, the default value is the function itself."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Execution"),"\uff1aThe program is executed line by line, and values are assigned based on the executed code.")),(0,i.kt)("p",null,"Taking the following code as an example\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"console.log(a); // undefined\nvar a = 1;\n\nlogName(); // jordan\nfunction logName() {\n  console.log('jordan');\n}\n")),(0,i.kt)("p",null,"The JavaScript compilation process is as follows\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Creation"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A memory location named ",(0,i.kt)("inlineCode",{parentName:"li"},"a")," is created, with a default value of ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,i.kt)("li",{parentName:"ul"},"A memory location named ",(0,i.kt)("inlineCode",{parentName:"li"},"logName")," is created, with a default value of the ",(0,i.kt)("inlineCode",{parentName:"li"},"logName")," function declaration itself.")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Execution"),"\uff1a")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"console.log(a)")," is executed, outputting ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),", because the default value of a is ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"var a = 1")," is executed, assigning an initial value of 1 to the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"a"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"logName()"),' is executed, outputting "jordan", because the default value of ',(0,i.kt)("inlineCode",{parentName:"li"},"logName")," is the logName function declaration itself.")),(0,i.kt)("h3",{id:"undefined-vs-not-defined"},(0,i.kt)("inlineCode",{parentName:"h3"},"undefined")," vs. not defined"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"\uff1aA primitive value that is automatically assigned to variables during that have been declared but have not been initialized with a value."),(0,i.kt)("li",{parentName:"ul"},"not defined\uff1aA variable that has not been declared in the current scope or in any parent scope. This will result in a ",(0,i.kt)("inlineCode",{parentName:"li"},"ReferenceError")," when trying to access it.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"var a;\n\nconsole.log(a); // undefined\nconsole.log(b); // ReferenceError: a is not defined\n")),(0,i.kt)("h3",{id:"faq"},"FAQ"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Determine the result")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"let a = 1;\n{\n  console.log(a);\n  let a = 2;\n}\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Answer\uff1a")),(0,i.kt)("p",{parentName:"li"},"The result of the code will be a ",(0,i.kt)("inlineCode",{parentName:"p"},"ReferenceError")," because of the concept of temporal dead zone (TDZ) in JavaScript."),(0,i.kt)("p",{parentName:"li"},"In the creation phase, memory space is created for the global variable ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," and a local variable ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," inside the block."),(0,i.kt)("p",{parentName:"li"},"During the execution phase, when ",(0,i.kt)("inlineCode",{parentName:"p"},"console.log(a)")," is executed inside the block, the local variable ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," is in the TDZ as it has not been initialized yet. Therefore, trying to access ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," at this point will result in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ReferenceError"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Determine the result")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"var logName = function () {\n  console.log('jordan');\n};\n\nfunction logName() {\n  console.log('john');\n}\n\nlogName();\n")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Answer\uff1a")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Creation"),"\uff1a"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"When both variable and function declaration use the same name, the function declaration takes priority over the variable declaration."),(0,i.kt)("li",{parentName:"ol"},"Create memory space for the function ",(0,i.kt)("inlineCode",{parentName:"li"},"logName")," with a default value of ",(0,i.kt)("inlineCode",{parentName:"li"},"logName")," itself.")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Execution"),"\uff1a"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The function ",(0,i.kt)("inlineCode",{parentName:"p"},"logName")," is reassigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"function () { console.log('jordan'); }"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Execute ",(0,i.kt)("inlineCode",{parentName:"p"},"logName()")," and print out 'jordan'."))))),(0,i.kt)("p",null,"Reference\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://pjchender.blogspot.com/2015/12/javascript-hoisting.html"},"https://pjchender.blogspot.com/2015/12/javascript-hoisting.html")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting"},"https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting"))))}u.isMDXComponent=!0}}]);