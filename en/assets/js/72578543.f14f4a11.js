"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[29],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(t),f=i,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||a;return t?n.createElement(m,o(o({ref:r},u),{},{components:t})):n.createElement(m,o({ref:r},u))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[p]="string"==typeof e?e:i,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4279:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var n=t(7462),i=(t(7294),t(3905));const a={},o="Trie",c={unversionedId:"\u8cc7\u6599\u7d50\u69cb/trie/index",id:"\u8cc7\u6599\u7d50\u69cb/trie/index",title:"Trie",description:"\u4ec0\u9ebc\u662f Trie",source:"@site/docs/\u8cc7\u6599\u7d50\u69cb/trie/index.md",sourceDirName:"\u8cc7\u6599\u7d50\u69cb/trie",slug:"/\u8cc7\u6599\u7d50\u69cb/trie/",permalink:"/frontendwiz/en/\u8cc7\u6599\u7d50\u69cb/trie/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u8cc7\u6599\u7d50\u69cb/trie/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"XSS",permalink:"/frontendwiz/en/\u7db2\u8def\u5b89\u5168/xss"},next:{title:"\u5be6\u4f5c\u9663\u5217\u65b9\u6cd5",permalink:"/frontendwiz/en/\u9762\u8a66\u624b\u5beb\u984c/array-methods"}},l={},s=[{value:"\u4ec0\u9ebc\u662f Trie",id:"\u4ec0\u9ebc\u662f-trie",level:3},{value:"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528 Trie",id:"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528-trie",level:3},{value:"\u5be6\u4f5c",id:"\u5be6\u4f5c",level:3}],u={toc:s},p="wrapper";function d(e){let{components:r,...a}=e;return(0,i.kt)(p,(0,n.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"trie"},"Trie"),(0,i.kt)("h3",{id:"\u4ec0\u9ebc\u662f-trie"},"\u4ec0\u9ebc\u662f Trie"),(0,i.kt)("p",null,"Trie\uff08\u767c\u97f3\u70ba try\uff09\uff0c\u53c8\u7a31\u70ba Prefix Tree\uff0c\u662f\u4e00\u7a2e\u7528\u65bc\u5feb\u901f\u641c\u5c0b\u5b57\u4e32\u7684\u8cc7\u6599\u7d50\u69cb\uff0c\u5b83\u901a\u5e38\u662f\u4e00\u500b\u985e\u4f3c\u6a39\u72c0\u7684\u7d50\u69cb\uff0c\u7531\u65bc Trie \u53ef\u4ee5\u5feb\u901f\u627e\u5230\u7b26\u5408\u5339\u914d\u524d\u7db4\u7684\u6240\u6709\u5b57\u4e32\uff0c\u7d93\u5e38\u7528\u65bc autocomplete \u548c spell checker\u3002"),(0,i.kt)("p",null,"\u5728 Trie \u4e2d\uff0c\u6bcf\u500b\u7bc0\u9ede\u8868\u793a\u4e00\u500b\u5b57\u6bcd\u6216\u5b57\u7b26\u3002\u6839\u7bc0\u9ede\u8868\u793a\u4e00\u500b\u7a7a\u5b57\u7b26\u4e32\uff0c\u6bcf\u500b\u5b50\u7bc0\u9ede\u8868\u793a\u5b57\u4e32\u4e2d\u7684\u4e00\u500b\u5b57\u6bcd\u6216\u5b57\u7b26\u3002\u4ee5\u82f1\u6587\u70ba\u4f8b\uff0cTrie \u6bcf\u4e00\u5c64\u6700\u591a\u53ea\u6703\u6709 26 \u500b\u5b57\u6bcd\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"alt text",src:t(1578).Z,width:"624",height:"593"})),(0,i.kt)("h3",{id:"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528-trie"},"\u70ba\u4ec0\u9ebc\u8981\u4f7f\u7528 Trie"),(0,i.kt)("p",null,"\u8a66\u60f3\u4e00\u500b\u60c5\u5883\uff0c\u5982\u679c\u900f\u904e\u9663\u5217\u7684\u65b9\u5f0f\u4f86\u5be6\u4f5c\u5b57\u4e32\u641c\u5c0b\uff0c\u6211\u5011\u61c9\u8a72\u600e\u9ebc\u505a \ud83e\udd14"),(0,i.kt)("p",null,'\u5982\u679c\u6709 1000000 \u7b46\u8cc7\u6599\uff0c\u8981\u641c\u5c0b\u662f\u5426\u6709\u524d\u7db4\u70ba "ca" \u7684\u55ae\u5b57\uff0c\u5fc5\u9808\u6aa2\u67e5\u9663\u5217\u88e1\u6240\u6709\u7684\u8cc7\u6599\uff08\u8dd1 1000000 \u6b21\u8ff4\u5708\uff09\u3002'),(0,i.kt)("p",null,'\u4f46\u662f\u5982\u679c\u900f\u904e Trie \u4f86\u5be6\u4f5c\uff0c\u5247\u53ea\u9700\u8981\u6aa2\u67e5\u662f\u5426\u6709 "ca" \u5169\u500b\u9023\u7e8c\u5b58\u5728\u7684\u7bc0\u9ede\u5373\u53ef\uff08\u8dd1 2 \u6b21\u8ff4\u5708\uff09\u3002'),(0,i.kt)("h3",{id:"\u5be6\u4f5c"},"\u5be6\u4f5c"),(0,i.kt)("p",null,"\u5be6\u4f5c\u7684 Trie \u6709\u4ee5\u4e0b\u4e09\u500b\u65b9\u6cd5\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"insert(word)"),"\uff1a\u5c07\u5b57\u4e32 word \u63d2\u5165\u5230 Trie \u7269\u4ef6\u4e2d\u3002"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"search(word)"),"\uff1a\u67e5\u8a62\u5b57\u4e32 word \u662f\u5426\u5728 Trie \u7269\u4ef6\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56de true\uff0c\u5426\u5247\u8fd4\u56de false\u3002"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"startsWith(prefix)"),"\uff1a\u67e5\u8a62\u662f\u5426\u6709\u4ee5\u5b57\u4e32 prefix \u70ba\u524d\u7db4\u7684\u5b57\u4e32\u5728 Trie \u7269\u4ef6\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56de true\uff0c\u5426\u5247\u8fd4\u56de false\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// TrieNode \u8868\u793a Trie \u4e2d\u7684\u4e00\u500b\u7bc0\u9ede\n// \u5b83\u5177\u6709\u4e00\u500b children \u7269\u4ef6\u4f86\u5b58\u5132\u5b83\u7684\u5b50\u7bc0\u9ede\uff0c\u4ee5\u53ca\u4e00\u500b endOfWord \u4f86\u8868\u793a\u8a72\u7bc0\u9ede\u662f\u5426\u70ba\u5b57\u4e32\u7684\u7d50\u5c3e\nclass TrieNode {\n  constructor() {\n    this.children = new Map();\n    this.endOfWord = false;\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  insert(word) {\n    let current = this.root;\n\n    for (const char of word) {\n      if (!current.children.has(char)) {\n        current.children.set(char, new TrieNode());\n      }\n\n      current = current.children.get(char);\n    }\n\n    current.endOfWord = true;\n  }\n\n  search(word) {\n    let current = this.root;\n\n    for (const char of word) {\n      if (!current.children.has(char)) {\n        return false;\n      }\n\n      current = current.children.get(char);\n    }\n\n    return current.endOfWord;\n  }\n\n  startsWith(prefix) {\n    let current = this.root;\n\n    for (const char of prefix) {\n      if (!current.children.has(char)) {\n        return false;\n      }\n\n      current = current.children.get(char);\n    }\n\n    return true;\n  }\n}\n")),(0,i.kt)("p",null,"\u53c3\u8003\u4f86\u6e90:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.studytonight.com/advanced-data-structures/trie-data-structure-explained-with-examples"},"https://www.studytonight.com/advanced-data-structures/trie-data-structure-explained-with-examples")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/implement-trie-prefix-tree/description/"},"https://leetcode.com/problems/implement-trie-prefix-tree/description/"))))}d.isMDXComponent=!0},1578:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/1604153921-76844-1889a4b7c039bbe00cf7088960cadf4a.webp"}}]);